#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Link socket.io to server
 */
const io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}


/**
 * Some helper Functions/Classes/Variables
 */

const jwt = require('jsonwebtoken');
const secret_key = require('../keys/jwt_secret');
const base64url = require('base64url');

function getRandStr (length) {
  const letter = [];
  for (let i = 0; i < 10; i += 1) {
    letter.push(String.fromCharCode(48 + i));
  }
  for (let i = 0; i < 26; i += 1) {
    letter.push(String.fromCharCode(65 + i));
    letter.push(String.fromCharCode(97 + i));
  }
  let return_text = '';
  for (let i = 0; i < length; i += 1) {
    return_text = return_text + letter[Math.floor(Math.random() * letter.length)];
  }
  return return_text;
}

const roomList = {};
const uniqueList = {};

class Room {
  constructor (name, token) {
    this.name = name;
    this.token = token;
    this.user = [];
    // {'name': 'mango', 'code': 'bntjdkgm', 'vote_status': '0'}
    // vote_status: 0 -> cannot vote, 1 -> can vote
    this.voteResult = [];
    this.voting = 0;
    this.voteQuestion = '';
    this.showUrl = 'about:blank;';
    // 0: no voting, 1: 
    this.voteList = [];
    this.voteLeft = [];
    this.currentVote = {};
    this.totalActiveCount = 0;

    this.pastResult = [];
  }

  addUser (name, code) {
    this.user.push({ name, code, vote_status: 0 });
  }

  changeRole (code) {
    for (let i = 0; i < this.user.length; i += 1) {
      if (this.user[i].code === code) {
        if (this.user[i].vote_status === 0) this.user[i].vote_status = 1;
        else this.user[i].vote_status = 0;
      }
    }
  }

  startVote (question) {
    this.voting = 1;
    this.voteResult = [];
    this.voteList = [];
    this.voteLeft = [];
    this.voteQuestion = question;
    for (let i = 0; i < this.user.length; i += 1) {
      this.voteResult.push(-1);
      if (this.user[i].vote_status > 0) {
        // wholCnt += 1;
        this.voteList.push({ name: this.user[i].name, vote: -1 });
        this.voteLeft.push(this.user[i].name);
      }
    }
    this.totalActiveCount = this.voteLeft.length;
    this.currentVote = { now: 0, total: this.totalActiveCount };
    const updateVoteStatus = setInterval(() => {
      if (!this.voting) {
        clearInterval(updateVoteStatus);
      } else {
        const rtnList = [];
        const rtnLeftList = [];
        let voteCnt = 0;
        for (let i = 0; i < this.user.length; i += 1) {
          if (this.user[i].vote_status > 0) {
            rtnList.push({ name: this.user[i].name, vote: this.voteResult[i] });
            if (this.voteResult[i] >= 0) {
              voteCnt += 1;
            } else {
              rtnLeftList.push(this.user[i].name);
            }
          }
        }
        this.voteList = rtnList;
        this.voteLeft = rtnLeftList;
        this.currentVote = { now: voteCnt, total: this.totalActiveCount };
      }
    }, 200);
  }

  getStatus (isAdmin) {
    if (isAdmin) {
      return {
        name: this.name,
        voting: this.voting,
        voteQuestion: this.voteQuestion,
        showUrl: this.showUrl,
        user: this.user,
        voteResult: this.voteResult,
      };
    } else {
      return {
        name: this.name,
        voting: this.voting,
        voteQuestion: this.voteQuestion,
        showUrl: this.showUrl,
      };
    }
  }

  getVoteStatus () {
    return {
      currentVote: this.currentVote,
      voteLeft: this.voteLeft,
      pastResult: this.pastResult,
    };
  }

  getVoteResult () {
    return { who: 'Seungmin' };
  }

  finishVote () {
    this.voting = 2;
    let agree = 0;
    let disagree = 0;
    let none = 0;
    let result = '';
    for (let i = 0; i < this.voteList.length; i += 1) {
      if (this.voteList[i].vote === 0) {
        none += 1;
      } else if (this.voteList[i].vote === 1) {
        agree += 1;
      } else if (this.voteList[i].vote === 2) {
        disagree += 1;
      }
    }

    if (none * 2 > this.currentVote.total) {
      result = 'none';
    } else if (agree > disagree) {
      result = 'agree';
    } else if (agree < disagree) {
      result = 'disagree';
    } else {
      result = 'none';
    }

    this.pastResult.unshift({
      voteQuestion: this.voteQuestion,
      total: this.currentVote.total,
      agree,
      disagree,
      none,
      result,
    });

    setTimeout(() => {
      this.voting = 0;
    }, 3000);
  }
}


/**
 * socket.io Listener & Emitter
 */

io.on('connection', (socket) => {
  console.log(`-----socket connected ${socket.id}`);

  socket.on('disconnect', () => {
    console.log(`-----socket disconnected ${socket.id}`);
  });

  /* Socket About Room */
  socket.on('createRoom', (roomName) => {
    let roomId;
    const roomCode = getRandStr(8);
    jwt.sign({ roomCode }, secret_key, { expiresIn: '6h' }, (err, token) => {
      if (err) {
        socket.emit('creationFailed');
      } else {
        roomId = base64url(token);
        const newRoom = new Room(roomName, roomId);
        roomList[roomId] = newRoom;
        socket.emit('creationSuccess', roomId);
      }
    });
  });

  socket.on('verifyRoom', (roomCode) => {
    try {
      jwt.verify(base64url.decode(roomCode), secret_key, function (err, decoded) {
        if (err) {
          console.log('token verify failed!');
          socket.emit('verifyRoomFailed');
        } else {
          if (roomCode in roomList) {
            const roomTarget = roomList[roomCode];
            // console.log(roomList[roomCode]);
            socket.emit('verifyRoomSuccess', { room: roomTarget.getStatus(true) });
            if (roomTarget.voting === 1 || roomTarget.voting === 2) {
              socket.emit('realTimeCurrentVote', roomTarget.getVoteStatus());
            }
          } else {
            console.log('Room not found');
            socket.emit('verifyRoomFailed');
          }
        }
      });
    } catch (err) {
      socket.emit('verifyRoomFailed');
    }
  });

  socket.on('verifyUser', (userCode) => {
    if ((userCode in uniqueList) && (uniqueList[userCode].room in roomList)) {
      let found = false;
      const roomTarget = roomList[uniqueList[userCode].room];
      for (let i = 0; i < roomTarget.user.length; i += 1) {
        if (roomTarget.user[i].code === userCode) {
          found = true;
          break;
        }
      }
      if (found) {
        socket.emit('verifyUserSuccess', { room: roomTarget.getStatus(false), name: uniqueList[userCode].name });
      } else {
        console.log('User already deleted');
        socket.emit('verifyUserFailed');
      }
    } else {
      console.log('User not found');
      socket.emit('verifyUserFailed');
    }
  });

  socket.on('createUser', (data) => {
    console.log(data.roomId);
    console.log(data.userName);
    console.log(roomList);
    const roomTarget = roomList[data.roomId];
    if (!roomTarget) {
      console.log('ROOMTARGET ERROR');
      socket.emit('userAddFailed');
    } else {
      console.log('ROOM FOUND');
      let newCode = getRandStr(8);
      while (uniqueList[newCode] !== undefined) {
        newCode = getRandStr(8);
      }
      uniqueList[newCode] = { room: data.roomId, name: data.userName };
      roomTarget.addUser(data.userName, newCode);
      socket.emit('userAddSuccess', newCode);
    }
  });

  socket.on('deleteUser', (roomId, userCode) => {
    const roomTarget = roomList[roomId];
    console.log(roomId, userCode, roomTarget);
    if (!roomTarget || !uniqueList[userCode]) {
      console.log('deleteUser error');
      socket.emit('deleteUserFailed');
    } else if (roomTarget.voting > 0) {
      console.log('deleteUser error while voting');
      socket.emit('deleteUserFailed');
    } else {
      delete uniqueList[userCode];
      for (let i = 0; i < roomTarget.user.length; i += 1) {
        if (roomTarget.user[i].code === userCode) {
          roomTarget.user.splice(i, 1);
          break;
        }
      }
      socket.emit('deleteUserSuccess');
    }
  });
  socket.on('changeUserRole', (roomId, userCode) => {
    const roomTarget = roomList[roomId];
    console.log(roomId, userCode, roomTarget);
    if (!roomTarget || !uniqueList[userCode]) {
      console.log('changeUserRole error');
      socket.emit('changeUserRoleFailed');
    } else if (roomTarget.voting > 0) {
      console.log('changeUserRole while Voting...');
      socket.emit('changeUserRoleFailed');
    } else {
      let found = false;
      for (let i = 0; i < roomTarget.user.length; i += 1) {
        if (roomTarget.user[i].code === userCode) {
          roomTarget.user[i].vote_status = 1 - roomTarget.user[i].vote_status;
          found = true;
          console.log('succcess!');
          socket.emit('changeUserRoleSuccess');
          break;
        }
      }
      if (!found) {
        console.log('cannot find user while changeUserRole');
        socket.emit('changeUserRoleFailed');
      }
    }
  });
  socket.on('changeLink', (roomId, newUrl) => {
    const roomTarget = roomList[roomId];
    if (!roomTarget) {
      console.log('changeLink error');
      socket.emit('changeLinkFailed');
    } else {
      roomTarget.showUrl = newUrl;
      socket.emit('changeLinkSuccess');
    }
  });

  socket.on('addVote', (data) => {
    const roomTarget = roomList[data.roomId];
    if (!roomTarget || data.question === '') {
      socket.emit('addVoteFailed');
    } else if (roomTarget.voting > 0) {
      socket.emit('addVoteFailed', {
        message: 'This room is already on voting',
      });
    } else {
      socket.emit('addVoteSuccess');
      roomTarget.startVote(data.question);
    }
  });

  socket.on('finishOnVote', (data) => {
    const roomTarget = roomList[data.roomId];
    if (!roomTarget || roomTarget.voting !== 1) {
      socket.emit('finishOnVoteFailed');
    } else {
      socket.emit('finishOnVoteSuccess');
      roomTarget.finishVote();
    }
  });

  socket.on('userVote', (userCode, result) => {
    if (userCode in uniqueList) {
      // 0: None, 1: ADMIT, 2: F**K
      if (result === 0 || result === 1 || result === 2) {
        if (uniqueList[userCode].room in roomList) {
          const roomTarget = roomList[uniqueList[userCode].room];
          let found = false;
          for (let i = 0; i < roomTarget.user.length; i += 1) {
            if (roomTarget.user[i].code === userCode && roomTarget.user[i].vote_status > 0) {
              found = true;
              roomTarget.voteResult[i] = result;
              break;
            }
          }
          if (found) {
            socket.emit('userVoteSuccess');
          } else {
            console.log('userVoteFailed - You do not have any access');
            socket.emit('userVoteFailed');
          }
        } else {
          console.log('userVoteFailed - Room Not Found');
          socket.emit('userVoteFailed');
        }
      } else {
        console.log('userVoteFailed - Typecheck Failed');
        socket.emit('userVoteFailed');
      }
    } else {
      console.log('userVoteFailed - User not Exist');
      socket.emit('userVoteFailed');
    }
  });
});
